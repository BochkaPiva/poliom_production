#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LLM –º–æ–¥–µ–ª—è–º–∏ (GigaChat)
"""

import os
import logging
import re
from typing import List, Dict, Any, Optional

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
try:
    from services.shared.utils.llm_client import SimpleLLMClient
    from services.shared.utils.prompts import PromptManager, PromptTemplates
except ImportError:
    # Fallback –¥–ª—è —Å–ª—É—á–∞—è, –µ—Å–ª–∏ –º–æ–¥—É–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
    from utils.llm_client import SimpleLLMClient
    from utils.prompts import PromptManager, PromptTemplates

logger = logging.getLogger(__name__)

class LLMService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LLM - —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º GigaChat –∫–ª–∏–µ–Ω—Ç
        gigachat_key = os.getenv('GIGACHAT_API_KEY')
        if not gigachat_key:
            logger.warning("GIGACHAT_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω. LLM –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            self.client = None
        else:
            self.client = SimpleLLMClient(gigachat_key)
            logger.info("LLM —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å GigaChat")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤
        self.prompt_manager = PromptManager()
    
    def format_search_answer(self, query: str, search_results: List[Dict[str, Any]]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ —Å–≤—è–∑–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é LLM
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            search_results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        """
        if not self.client:
            return self._format_simple_answer(search_results)
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
            context_parts = []
            for i, result in enumerate(search_results[:3], 1):
                content = result.get('content', '')
                doc_name = result.get('document_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç')
                chunk_index = result.get('chunk_index', 0)
                similarity = result.get('similarity', 0)
                
                context_parts.append(
                    f"–§—Ä–∞–≥–º–µ–Ω—Ç {i} (–∏–∑ {doc_name}, —á–∞—Å—Ç—å #{chunk_index}, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {similarity:.1%}):\n{content}"
                )
            
            context = "\n\n".join(context_parts)
            
            # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            prompt = self.prompt_manager.get_search_prompt(
                context=context,
                question=query,
                search_results=search_results
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GigaChat
            response = self.client.gigachat.generate_response(
                prompt=prompt,
                max_tokens=800,
                temperature=0.2  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
            )
            
            if response.success:
                logger.info(f"LLM —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–ª –æ—Ç–≤–µ—Ç. –¢–æ–∫–µ–Ω–æ–≤: {response.tokens_used}")
                return response.text.strip()
            else:
                logger.error(f"–û—à–∏–±–∫–∞ LLM: {response.error}")
                return self._format_simple_answer(search_results)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return self._format_simple_answer(search_results)
    
    def _format_simple_answer(self, search_results: List[Dict[str, Any]]) -> str:
        """
        –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ LLM (fallback)
        
        Args:
            search_results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
            
        Returns:
            str: –ü—Ä–æ—Å—Ç–æ–π –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        """
        if not search_results:
            return "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö."
        
        best_result = search_results[0]
        content = best_result.get('content', '')
        doc_name = best_result.get('document_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç')
        chunk_index = best_result.get('chunk_index', 0)
        similarity = best_result.get('similarity', 0)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
        percentages = re.findall(r'(\d+(?:,\d+)?)\s*(?:–ø—Ä–æ—Ü–µ–Ω—Ç|%)', content, re.IGNORECASE)
        amounts = re.findall(r'(\d+(?:\s?\d{3})*(?:,\d+)?)\s*(?:—Ä—É–±–ª|‚ÇΩ)', content, re.IGNORECASE)
        times = re.findall(r'(\d{1,2}:\d{2}|\d{1,2}\s*—á–∞—Å)', content, re.IGNORECASE)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        answer_parts = [f"üìÑ –ù–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ: **{doc_name}**"]
        
        if percentages:
            answer_parts.append(f"üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã: {', '.join(percentages)}%")
        
        if amounts:
            answer_parts.append(f"üí∞ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—É–º–º—ã: {', '.join(amounts)} —Ä—É–±.")
        
        if times:
            answer_parts.append(f"‚è∞ –ù–∞–π–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {', '.join(times)}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_preview = content[:200] + "..." if len(content) > 200 else content
        answer_parts.append(f"\nüìù **–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:**\n{content_preview}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        answer_parts.append(f"\nüìö **–ò—Å—Ç–æ—á–Ω–∏–∫:** {doc_name} (—Ñ—Ä–∞–≥–º–µ–Ω—Ç #{chunk_index})")
        answer_parts.append(f"üìà **–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å:** {similarity:.1%}")
        
        return "\n".join(answer_parts)
    
    def summarize_document(self, document_content: str, max_length: int = 200) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        
        Args:
            document_content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ä–µ–∑—é–º–µ –≤ —Å–ª–æ–≤–∞—Ö
            
        Returns:
            str: –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
        """
        if not self.client:
            # –ü—Ä–æ—Å—Ç–æ–µ —Ä–µ–∑—é–º–µ –±–µ–∑ LLM
            words = document_content.split()
            if len(words) <= max_length:
                return document_content
            return " ".join(words[:max_length]) + "..."
        
        try:
            prompt = self.prompt_manager.get_summary_prompt(
                document_content=document_content,
                max_length=max_length
            )
            
            response = self.client.gigachat.generate_response(
                prompt=prompt,
                max_tokens=400,
                temperature=0.3
            )
            
            if response.success:
                return response.text.strip()
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ: {response.error}")
                # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É —Ä–µ–∑—é–º–µ
                words = document_content.split()
                return " ".join(words[:max_length]) + "..." if len(words) > max_length else document_content
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ: {e}")
            words = document_content.split()
            return " ".join(words[:max_length]) + "..." if len(words) > max_length else document_content
    
    def handle_no_results(self, query: str) -> str:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            str: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        return self.prompt_manager.get_error_prompt("no_results", query)
    
    def handle_search_error(self, query: str, error: str) -> str:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –ø–æ–∏—Å–∫–∞
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            error: –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
            
        Returns:
            str: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        return self.prompt_manager.get_error_prompt("search_error", query)
    
    def suggest_clarification(self, query: str, available_topics: List[str]) -> str:
        """
        –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–ª—è –Ω–µ—è—Å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        
        Args:
            query: –ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            available_topics: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º
            
        Returns:
            str: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É—Ç–æ—á–Ω–µ–Ω–∏—é –∑–∞–ø—Ä–æ—Å–∞
        """
        if not self.client:
            return f"–í–∞—à –∑–∞–ø—Ä–æ—Å '{query}' —Å–ª–∏—à–∫–æ–º –æ–±—â–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±—ã—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º."
        
        try:
            prompt = self.prompt_manager.get_clarification_prompt(query, available_topics)
            
            response = self.client.gigachat.generate_response(
                prompt=prompt,
                max_tokens=300,
                temperature=0.4
            )
            
            if response.success:
                return response.text.strip()
            else:
                return f"–í–∞—à –∑–∞–ø—Ä–æ—Å '{query}' —Å–ª–∏—à–∫–æ–º –æ–±—â–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±—ã—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º."
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–π: {e}")
            return f"–í–∞—à –∑–∞–ø—Ä–æ—Å '{query}' —Å–ª–∏—à–∫–æ–º –æ–±—â–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±—ã—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º."
    
    def health_check(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å LLM —Å–µ—Ä–≤–∏—Å–∞
        
        Returns:
            bool: True –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç
        """
        if not self.client:
            return False
        
        return self.client.health_check()
    
    def get_service_info(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ
        
        Returns:
            Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞
        """
        return {
            "llm_available": self.client is not None,
            "prompt_manager_active": True,
            "company_name": self.prompt_manager.company_name,
            "service_healthy": self.health_check()
        } 