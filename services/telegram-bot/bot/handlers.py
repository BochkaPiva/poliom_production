"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram –±–æ—Ç–∞
"""

import logging
import sys
import re
from pathlib import Path
from typing import Dict, Any
import time
import asyncio
from datetime import timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root / "shared"))
sys.path.insert(0, str(project_root / "services" / "telegram-bot"))

from aiogram import Dispatcher, types, F, Router
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext

try:
    from bot.config import Config
    from bot.database import log_user_query, get_user_stats, check_database_health, get_documents_count, get_or_create_user, get_menu_sections, get_menu_items, get_menu_item_content
    from bot.rag_service import RAGService
except ImportError:
    # Fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    import os
    import sys
    current_dir = os.path.dirname(os.path.abspath(__file__))
    sys.path.insert(0, current_dir)
    
    from config import Config
    from database import log_user_query, get_user_stats, check_database_health, get_documents_count, get_or_create_user, get_menu_sections, get_menu_items, get_menu_item_content
    from rag_service import RAGService

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ RAG —Å–µ—Ä–≤–∏—Å
config = Config()
rag_service = RAGService(config.GIGACHAT_API_KEY)

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ñ–∞–π–ª–æ–≤
files_storage = {}

# –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
USER_FILE_LIMITS = {}  # {user_id: {'count': 0, 'last_reset': timestamp}}
MAX_FILES_PER_HOUR = 10  # –ú–∞–∫—Å–∏–º—É–º —Ñ–∞–π–ª–æ–≤ –≤ —á–∞—Å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

def check_user_file_limit(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    current_time = time.time()
    
    if user_id not in USER_FILE_LIMITS:
        USER_FILE_LIMITS[user_id] = {'count': 0, 'last_reset': current_time}
    
    user_data = USER_FILE_LIMITS[user_id]
    
    # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –µ—Å–ª–∏ –ø—Ä–æ—à–µ–ª —á–∞—Å
    if current_time - user_data['last_reset'] > 3600:  # 1 —á–∞—Å
        user_data['count'] = 0
        user_data['last_reset'] = current_time
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –î–û —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
    if user_data['count'] >= MAX_FILES_PER_HOUR:
        return False
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ª–∏–º–∏—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω
    user_data['count'] += 1
    return True

def is_file_allowed_for_sharing(file_path: str, file_type: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ file_path –Ω–µ –ø—É—Å—Ç–æ–π
    if not file_path or not file_type:
        return False
    
    # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
    allowed_types = ['pdf', 'docx', 'doc', 'txt', 'xlsx', 'xls']
    
    # –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞
    forbidden_patterns = [
        '–∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ',
        '—Å–µ–∫—Ä–µ—Ç–Ω–æ', 
        '–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ',
        '–∑–∞—Ä–ø–ª–∞—Ç–∞_—Å–ø–∏—Å–æ–∫',
        'password'
    ]
    
    file_path_lower = file_path.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if file_type.lower() not in allowed_types:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    for pattern in forbidden_patterns:
        if pattern in file_path_lower:
            return False
    
    return True

async def log_file_download(user_id: int, file_path: str, file_title: str, success: bool):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
    try:
        from datetime import datetime
        log_message = (
            f"FILE_DOWNLOAD: user_id={user_id}, "
            f"file='{file_title}', path='{file_path}', "
            f"success={success}, timestamp={datetime.now().isoformat()}"
        )
        logger.info(log_message)
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ª–æ–≥–æ–≤ —Ñ–∞–π–ª–æ–≤
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

router = Router()

def cleanup_old_files():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)"""
    current_time = time.time()
    keys_to_remove = []
    
    for key, data in files_storage.items():
        if current_time - data.get('timestamp', 0) > 3600:  # 1 —á–∞—Å
            keys_to_remove.append(key)
    
    for key in keys_to_remove:
        del files_storage[key]
    
    if keys_to_remove:
        logger.info(f"–û—á–∏—â–µ–Ω–æ {len(keys_to_remove)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π —Ñ–∞–π–ª–æ–≤")

def is_blocked_response(response: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç GigaChat"""
    blocked_phrases = [
        "–ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ –æ–±–ª–∞–¥–∞—é—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –º–Ω–µ–Ω–∏–µ–º",
        "—Ä–∞–∑–≥–æ–≤–æ—Ä—ã –Ω–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–º—ã –º–æ–≥—É—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã",
        "—Ä–∞–∑–≥–æ–≤–æ—Ä—ã –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–º—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã",
        "–ö–∞–∫ –∏ –ª—é–±–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å, GigaChat –Ω–µ –æ–±–ª–∞–¥–∞–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –º–Ω–µ–Ω–∏–µ–º",
        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω–æ–≥–¥–∞ –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã",
        "–æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏, –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã",
        "–≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è, –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏, –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã"
    ]
    
    # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–ø–æ–ª–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –∑–∞—Ä–ø–ª–∞—Ç–µ
    if any(phrase in response for phrase in blocked_phrases):
        return True
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –æ –∑–∞—Ä–ø–ª–∞—Ç–µ –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞—Ç
    if ("–∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –¥–≤–∞ —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü" in response.lower() and 
        "—Å—Ä–æ–∫–∏ –≤—ã–ø–ª–∞—Ç—ã" in response.lower() and 
        "—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö" in response.lower() and
        not any(date in response for date in ['12', '27', '15'])):
        return True
    
    return False

def extract_key_information(chunks: list, question: str) -> str:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —á–∞–Ω–∫–æ–≤ –∫–æ–≥–¥–∞ GigaChat –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"""
    if not chunks:
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π."
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∏–∑ —á–∞–Ω–∫–æ–≤
    key_info = []
    question_words = set(question.lower().split())
    
    for chunk in chunks[:5]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
        content = chunk.get('content', '')
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        sentences = content.split('.')
        for sentence in sentences:
            sentence = sentence.strip()
            if len(sentence) < 20:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –≤–æ–ø—Ä–æ—Å–∞
            sentence_words = set(sentence.lower().split())
            overlap = question_words & sentence_words
            
            if len(overlap) >= 1:  # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å–ª–æ–≤
                key_info.append(sentence.strip())
                
        if len(key_info) >= 3:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            break
    
    if not key_info:
        return "–ü–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É –Ω–∞–π–¥–µ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –±–∞–∑–µ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ HR-–æ—Ç–¥–µ–ª—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    result = "–ù–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n\n"
    for i, info in enumerate(key_info, 1):
        result += f"{i}. {info}.\n"
    
    result += "\nüí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ HR-–æ—Ç–¥–µ–ª—É."
    
    return result

def extract_specific_data_patterns(context: str, question: str) -> str:
    """–ù–ï –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –¥–ª—è –≤—Å–µ—Ö —Å–ª—É—á–∞–µ–≤"""
    # –£–±–∏—Ä–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é
    return None

def format_response_for_telegram(text: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –≤ Telegram"""
    if not text:
        return text
    
    # 1. –£–±–∏—Ä–∞–µ–º LaTeX —Ñ–æ—Ä–º—É–ª—ã –∏ –∑–∞–º–µ–Ω—è–µ–º –∏—Ö –Ω–∞ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
    import re
    
    # –ó–∞–º–µ–Ω—è–µ–º LaTeX —Ñ–æ—Ä–º—É–ª—ã \[...\] –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –≤ —Ä–∞–º–∫–∞—Ö
    latex_pattern = r'\\\[(.*?)\\\]'
    def replace_latex(match):
        formula = match.group(1)
        # –û—á–∏—â–∞–µ–º –æ—Ç LaTeX –∫–æ–º–∞–Ω–¥
        clean_formula = formula.replace('\\text{', '').replace('}', '').replace('\\times', ' √ó ').replace('\\', '')
        return f"\nüìã `{clean_formula}`\n"
    
    text = re.sub(latex_pattern, replace_latex, text, flags=re.DOTALL)
    
    # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é (—É–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ —Ç–æ—á–∫–∏)
    text = re.sub(r'(\d+)\.\.\s+', r'\1. ', text)
    
    # 3. –£–ª—É—á—à–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    text = re.sub(r'### (.+)', r'\nüî∑ **\1**\n', text)
    text = re.sub(r'## (.+)', r'\nüî∏ **\1**\n', text)
    
    # 4. –£–ª—É—á—à–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤
    # –ó–∞–º–µ–Ω—è–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Ç–∏—Ä–µ –Ω–∞ –æ–±—ã—á–Ω—ã–µ
    text = re.sub(r'^[-‚Äî‚Äì]\s+', '‚Ä¢ ', text, flags=re.MULTILINE)
    
    # 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    text = re.sub(r'\n{3,}', '\n\n', text)
    
    # 6. –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫
    lines = text.split('\n')
    cleaned_lines = [line.strip() for line in lines]
    text = '\n'.join(cleaned_lines)
    
    # 7. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—É–ª –≤ —Ç–µ–∫—Å—Ç–µ
    text = re.sub(r'([–ê-–Ø–∞-—è\s]+)=([–ê-–Ø–∞-—è\s\d√ó\(\)\-\+\/]+)', r'**\1** = `\2`', text)
    
    # 8. –£–ª—É—á—à–∞–µ–º —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –¥–ª–∏–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª
    if '–†–∞–∑–º–µ—Ä –ø—Ä–µ–º–∏–∏' in text or '–±–∞–∑–æ–≤–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ' in text:
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã –Ω–∞ —á–∞—Å—Ç–∏
        text = text.replace(' √ó ', ' √ó\n      ')
        text = text.replace('–°—É–º–º–∞—Ä–Ω–æ–µ –±–∞–∑–æ–≤–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –Ω–∞ —Ä–∞–±–æ—Ç–µ', 
                           '–°—É–º–º–∞—Ä–Ω–æ–µ –±–∞–∑–æ–≤–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ\n(—Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è)')
    
    # 9. –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    if 'üìö **–ò—Å—Ç–æ—á–Ω–∏–∫–∏:**' in text:
        text = text.replace('üìö **–ò—Å—Ç–æ—á–Ω–∏–∫–∏:**', '\n' + '‚îÄ' * 30 + '\nüìö **–ò—Å—Ç–æ—á–Ω–∏–∫–∏:**')
    
    return text.strip()

def create_faq_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è FAQ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î"""
    try:
        sections = get_menu_sections()
        keyboard_buttons = []
        
        for section in sections:
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=section['title'], 
                    callback_data=f"faq_section_{section['id']}"
                )
            ])
        
        keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        return keyboard
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è FAQ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        # Fallback –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ FAQ", callback_data="back_to_main")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        return keyboard

def create_main_keyboard(user_telegram_id: int = None):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    keyboard_buttons = [
        [InlineKeyboardButton(text="üìö FAQ", callback_data="show_faq")],
        [InlineKeyboardButton(text="üîç –£–º–Ω—ã–π –ø–æ–∏—Å–∫", callback_data="smart_search")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_telegram_id == 429336806:
        keyboard_buttons.append([InlineKeyboardButton(text="üè• –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="show_health")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    return keyboard

def create_section_keyboard(section_id: int):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ"""
    try:
        items = get_menu_items(section_id)
        keyboard_buttons = []
        
        for item in items:
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=item['title'], 
                    callback_data=f"faq_item_{item['id']}"
                )
            ])
        
        keyboard_buttons.append([InlineKeyboardButton(text="üîô –ö —Ä–∞–∑–¥–µ–ª–∞–º", callback_data="show_faq")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        return keyboard
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–∞–∑–¥–µ–ª–∞ {section_id}: {e}")
        # Fallback –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="show_faq")],
            [InlineKeyboardButton(text="üîô –ö —Ä–∞–∑–¥–µ–ª–∞–º", callback_data="show_faq")]
        ])
        return keyboard

async def get_or_create_user_async(telegram_id: int, username: str = None, 
                                 first_name: str = None, last_name: str = None):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è get_or_create_user"""
    loop = asyncio.get_event_loop()
    
    return await loop.run_in_executor(
        None, 
        get_or_create_user, 
        telegram_id, 
        username, 
        first_name,
        last_name
    )

async def log_user_query_async(user_id: int, query: str, response: str, 
                              response_time: float = None, similarity_score: float = None,
                              documents_used: str = None):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è log_user_query"""
    loop = asyncio.get_event_loop()
    
    return await loop.run_in_executor(
        None,
        log_user_query,
        user_id,
        query,
        response,
        response_time,
        similarity_score,
        documents_used
    )

@router.message(CommandStart())
async def start_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_or_create_user_async(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        
        if not user.is_active:
            await message.answer(
                "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return
        
        welcome_text = f"""üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!

ü§ñ **POLIOM HR Assistant** - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ç—Ä—É–¥–æ–≤—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π.

**–ß—Ç–æ —è —É–º–µ—é:**
üìö **FAQ** - –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
üîç **–£–º–Ω—ã–π –ø–æ–∏—Å–∫** - –ø–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –∫–æ–º–ø–∞–Ω–∏–∏
üìã **–¢–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã** - —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

**–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:**
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
‚Ä¢ –Ø –Ω–∞–π–¥—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help"""
        
        await message.answer(welcome_text.strip(), reply_markup=create_main_keyboard(message.from_user.id), parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_handler: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command("help"))
async def help_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:**

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
‚Ä¢ /stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å
‚Ä¢ –ë–æ—Ç –Ω–∞–π–¥–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

**–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ "–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –æ—Ç–ø—É—Å–∫?"
‚Ä¢ "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏?"
‚Ä¢ "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è"
‚Ä¢ "–†–∞–∑–º–µ—Ä –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –∑–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É"

ü§ñ –Ø –∏—Å–ø–æ–ª—å–∑—É—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π."""
    
    await message.answer(help_text.strip(), parse_mode='Markdown')

@router.message(Command("stats"))
async def stats_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_or_create_user_async(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        loop = asyncio.get_event_loop()
        stats = await loop.run_in_executor(
            None,
            get_user_stats,
            message.from_user.id
        )
        
        if 'error' in stats:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –û–º—Å–∫–∞ (+6 UTC)
        omsk_offset = timedelta(hours=6)
        
        created_at_omsk = None
        if stats['created_at']:
            created_at_omsk = stats['created_at'] + omsk_offset
            
        last_query_at_omsk = None
        if stats['last_query_at']:
            last_query_at_omsk = stats['last_query_at'] + omsk_offset
        
        stats_text = f"""üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {(stats['first_name'] or '') + (' ' + stats['last_name'] if stats['last_name'] else '') or stats['username'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üÜî **ID:** {stats['telegram_id']}
üìÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:** {created_at_omsk.strftime('%d.%m.%Y %H:%M') + ' (–û–º—Å–∫)' if created_at_omsk else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üìù **–ó–∞–ø—Ä–æ—Å–æ–≤:** {stats['query_count']}
üïê **–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å:** {last_query_at_omsk.strftime('%d.%m.%Y %H:%M') + ' (–û–º—Å–∫)' if last_query_at_omsk else '–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤'}
‚úÖ **–°—Ç–∞—Ç—É—Å:** {'–ê–∫—Ç–∏–≤–µ–Ω' if stats['is_active'] else '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}"""
        
        await message.answer(stats_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ stats_handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@router.message(Command("health"))
async def health_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /health"""
    try:
        health_status = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            loop = asyncio.get_event_loop()
            db_health = await loop.run_in_executor(None, check_database_health)
            if db_health:
                health_status.append("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: OK")
            else:
                health_status.append("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –û—à–∏–±–∫–∞")
        except Exception as e:
            health_status.append(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)[:50]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º RAG —Å–µ—Ä–≤–∏—Å
        try:
            rag_health = await rag_service.health_check()
            if rag_health.get('overall', False):
                health_status.append("‚úÖ RAG —Å–µ—Ä–≤–∏—Å: OK")
            else:
                health_status.append("‚ùå RAG —Å–µ—Ä–≤–∏—Å: –û—à–∏–±–∫–∞")
        except Exception as e:
            health_status.append(f"‚ùå RAG —Å–µ—Ä–≤–∏—Å: {str(e)[:50]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        try:
            loop = asyncio.get_event_loop()
            docs_count = await loop.run_in_executor(None, get_documents_count)
            health_status.append(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {docs_count}")
        except Exception as e:
            health_status.append(f"‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã: {str(e)[:50]}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        health_message = "üè• **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**\n\n" + "\n".join(health_status)
        
        await message.answer(health_message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ health_handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã")

@router.message(F.text)
async def question_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_or_create_user_async(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if not user.is_active:
            await message.answer("‚ùå –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç RAG —Å–∏—Å—Ç–µ–º—ã
        result = await rag_service.answer_question(message.text, user_id=user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if not result or 'answer' not in result:
            response_text = "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
        else:
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            chunks = result.get('chunks', [])
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(chunks)} —á–∞–Ω–∫–æ–≤ –æ—Ç RAG —Å–∏—Å—Ç–µ–º—ã")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
            relevant_chunks = []
            
            if chunks:
                # –§–∏–ª—å—Ç—Ä—É–µ–º —á–∞–Ω–∫–∏ –ø–æ —Å—Ö–æ–∂–µ—Å—Ç–∏ —Å –±–æ–ª–µ–µ –º—è–≥–∫–∏–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏
                for i, chunk in enumerate(chunks):
                    similarity = chunk.get('similarity', 0)
                    logger.info(f"–ß–∞–Ω–∫ {i+1}: similarity={similarity}")
                    
                    if similarity >= 0.25:  # –ï—â–µ –±–æ–ª—å—à–µ —Å–Ω–∏–∂–µ–Ω –ø–æ—Ä–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        relevant_chunks.append(chunk)
                        logger.info(f"–ß–∞–Ω–∫ {i+1} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π (similarity={similarity})")
                    else:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —á–∞–Ω–∫ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –≤–æ–ø—Ä–æ—Å–∞
                        question_words = set(message.text.lower().split())
                        chunk_words = set(chunk.get('content', '').lower().split())
                        
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º —á–∞–Ω–∫
                        overlap = question_words & chunk_words
                        if len(overlap) >= 1:
                            relevant_chunks.append(chunk)
                            logger.info(f"–ß–∞–Ω–∫ {i+1} –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {overlap}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
            logger.info(f"–ò—Ç–æ–≥–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤: {len(relevant_chunks)}")
            logger.info(f"–û—Ç–≤–µ—Ç GigaChat –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {is_blocked_response(result['answer'])}")
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
            if len(relevant_chunks) > 0:
                if is_blocked_response(result['answer']):
                    logger.info("GigaChat –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
                    response_text = extract_key_information(relevant_chunks, message.text)
                else:
                    logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–≤–µ—Ç GigaChat")
                    response_text = result['answer']
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                    if result.get('sources'):
                        response_text += "\n\nüìö **–ò—Å—Ç–æ—á–Ω–∏–∫–∏:**"
                        for j, source in enumerate(result['sources'], 1):
                            title = source.get('title', '–î–æ–∫—É–º–µ–Ω—Ç')
                            if len(title) > 5:  # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                                response_text += f"\n{j}. {title}"
            else:
                logger.info("–ù–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –æ—Ç–≤–µ—Ç")
                if result.get('answer') and not is_blocked_response(result['answer']):
                    response_text = result['answer']
                else:
                    response_text = (
                        "üîç **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞**\n\n"
                        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.\n\n"
                        "**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
                        "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
                        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
                        "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ HR-–æ—Ç–¥–µ–ª—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n\n"
                        "üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã HR-–æ—Ç–¥–µ–ª–∞:** [—É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã]"
                    )
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        if response_text:
            response_text = format_response_for_telegram(response_text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard_buttons = []
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∏—Ö –ø–æ–∫–∞–∑–∞
            files = result.get('files', []) if result else []
            if files:
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text=f"üìé –§–∞–π–ª—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∏ ({len(files)})", 
                        callback_data=f"show_files_{message.message_id}"
                    )
                ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard_buttons.append([
                InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
            ])
            
            back_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            if files:
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö
                cleanup_old_files()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
                files_storage[str(message.message_id)] = {
                    'files': files,
                    'timestamp': time.time()
                }
                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ñ–∞–π–ª—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message.message_id}: {[f['title'] for f in files]}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ markdown
            try:
                await message.answer(response_text, reply_markup=back_keyboard, parse_mode='Markdown')
            except:
                try:
                    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                    clean_text = response_text.replace('**', '').replace('*', '').replace('_', '').replace('`', '')
                    await message.answer(clean_text, reply_markup=back_keyboard)
                except:
                    await message.answer("–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", reply_markup=back_keyboard)
        
        except Exception as send_error:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {send_error}")
            # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                simple_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
                await message.answer("–û—Ç–≤–µ—Ç –≥–æ—Ç–æ–≤, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.", reply_markup=simple_keyboard)
            except:
                await message.answer("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        try:
            await log_user_query_async(
                user_id=user.id,
                query=message.text,
                response=response_text[:1000]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            )
        except Exception as log_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {log_error}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ question_handler: {e}")
        try:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
        except:
            await message.answer("‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.")

@router.callback_query(F.data == "show_faq")
async def show_faq_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å FAQ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "üìö **–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=create_faq_keyboard(),
        parse_mode='Markdown'
    )
    await callback.answer()

@router.callback_query(F.data == "show_stats")
async def show_stats_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ callback"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_or_create_user_async(
            telegram_id=callback.from_user.id,
            username=callback.from_user.username,
            first_name=callback.from_user.first_name,
            last_name=callback.from_user.last_name
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        loop = asyncio.get_event_loop()
        stats = await loop.run_in_executor(
            None,
            get_user_stats,
            callback.from_user.id
        )
        
        if 'error' in stats:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –û–º—Å–∫–∞ (+6 UTC)
        omsk_offset = timedelta(hours=6)
        
        created_at_omsk = None
        if stats['created_at']:
            created_at_omsk = stats['created_at'] + omsk_offset
            
        last_query_at_omsk = None
        if stats['last_query_at']:
            last_query_at_omsk = stats['last_query_at'] + omsk_offset
        
        stats_text = f"""üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {(stats['first_name'] or '') + (' ' + stats['last_name'] if stats['last_name'] else '') or stats['username'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üÜî **ID:** {stats['telegram_id']}
üìÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:** {created_at_omsk.strftime('%d.%m.%Y %H:%M') + ' (–û–º—Å–∫)' if created_at_omsk else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üìù **–ó–∞–ø—Ä–æ—Å–æ–≤:** {stats['query_count']}
üïê **–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å:** {last_query_at_omsk.strftime('%d.%m.%Y %H:%M') + ' (–û–º—Å–∫)' if last_query_at_omsk else '–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤'}
‚úÖ **–°—Ç–∞—Ç—É—Å:** {'–ê–∫—Ç–∏–≤–µ–Ω' if stats['is_active'] else '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}"""
        
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        
        await callback.message.edit_text(stats_text, reply_markup=back_keyboard, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_stats_callback: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    await callback.answer()

@router.callback_query(F.data == "show_health")
async def show_health_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ callback"""
    try:
        health_status = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            loop = asyncio.get_event_loop()
            db_health = await loop.run_in_executor(None, check_database_health)
            if db_health:
                health_status.append("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: OK")
            else:
                health_status.append("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –û—à–∏–±–∫–∞")
        except Exception as e:
            health_status.append(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)[:50]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º RAG —Å–µ—Ä–≤–∏—Å
        try:
            rag_health = await rag_service.health_check()
            if rag_health.get('overall', False):
                health_status.append("‚úÖ RAG —Å–µ—Ä–≤–∏—Å: OK")
            else:
                health_status.append("‚ùå RAG —Å–µ—Ä–≤–∏—Å: –û—à–∏–±–∫–∞")
        except Exception as e:
            health_status.append(f"‚ùå RAG —Å–µ—Ä–≤–∏—Å: {str(e)[:50]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        try:
            loop = asyncio.get_event_loop()
            docs_count = await loop.run_in_executor(None, get_documents_count)
            health_status.append(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {docs_count}")
        except Exception as e:
            health_status.append(f"‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã: {str(e)[:50]}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        health_message = "üè• **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**\n\n" + "\n".join(health_status)
        
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        
        await callback.message.edit_text(health_message, reply_markup=back_keyboard, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_health_callback: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã")
    
    await callback.answer()

@router.callback_query(F.data == "back_to_main")
async def back_to_main_callback(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    welcome_text = f"""üëã –ü—Ä–∏–≤–µ—Ç, {callback.from_user.first_name or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!

ü§ñ **POLIOM HR Assistant** - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ç—Ä—É–¥–æ–≤—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π.

**–ß—Ç–æ —è —É–º–µ—é:**
üìö **FAQ** - –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
üîç **–£–º–Ω—ã–π –ø–æ–∏—Å–∫** - –ø–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –∫–æ–º–ø–∞–Ω–∏–∏
üìã **–¢–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã** - —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

**–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:**
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
‚Ä¢ –Ø –Ω–∞–π–¥—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help"""
    
    await callback.message.edit_text(welcome_text.strip(), reply_markup=create_main_keyboard(callback.from_user.id), parse_mode='Markdown')
    await callback.answer()

@router.callback_query(F.data.startswith("faq_section_"))
async def faq_section_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ FAQ"""
    try:
        section_id = int(callback.data.replace("faq_section_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–¥–µ–ª–µ
        sections = get_menu_sections()
        section = next((s for s in sections if s['id'] == section_id), None)
        
        if not section:
            await callback.message.edit_text(
                "‚ùå –†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ö —Ä–∞–∑–¥–µ–ª–∞–º", callback_data="show_faq")]
                ])
            )
            await callback.answer()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
        keyboard = create_section_keyboard(section_id)
        
        section_text = f"üìö **{section['title']}**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:"
        if section['description']:
            section_text = f"üìö **{section['title']}**\n\n{section['description']}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:"
        
        await callback.message.edit_text(
            section_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ faq_section_callback: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑–¥–µ–ª–∞",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö —Ä–∞–∑–¥–µ–ª–∞–º", callback_data="show_faq")]
            ])
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("faq_item_"))
async def faq_item_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ FAQ"""
    try:
        item_id = int(callback.data.replace("faq_item_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–Ω—é
        item_data = get_menu_item_content(item_id)
        
        if not item_data:
            await callback.message.edit_text(
                "‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ö —Ä–∞–∑–¥–µ–ª–∞–º", callback_data="show_faq")]
                ])
            )
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º
        answer_text = f"‚ùì **{item_data['title']}**\n\n{item_data['content']}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
        answer_text += "\n\nüìö **–ò—Å—Ç–æ—á–Ω–∏–∫:** –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π POLIOM"
        answer_text += "\nüìã **–¢–∏–ø:** –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è HR-–æ—Ç–¥–µ–ª–∞"
        answer_text += "\n‚úÖ **–°—Ç–∞—Ç—É—Å:** –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ö —Ä–∞–∑–¥–µ–ª–∞–º", callback_data="show_faq")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
        
        await callback.message.edit_text(
            answer_text,
            reply_markup=back_keyboard,
            parse_mode='Markdown'
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä FAQ
        user = await get_or_create_user_async(
            telegram_id=callback.from_user.id,
            username=callback.from_user.username,
            first_name=callback.from_user.first_name,
            last_name=callback.from_user.last_name
        )
        
        await log_user_query_async(
            user_id=user.id,
            query=f"FAQ: {item_data['title']}",
            response=item_data['content'],
            documents_used="FAQ Database"
        )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ faq_item_callback: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–≤–µ—Ç–∞",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö —Ä–∞–∑–¥–µ–ª–∞–º", callback_data="show_faq")]
            ])
        )
    
    await callback.answer()

@router.callback_query(F.data == "smart_search")
async def smart_search_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    await callback.message.edit_text(
        "üîç **–£–º–Ω—ã–π –ø–æ–∏—Å–∫**\n\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –Ω–∞–π–¥—É –æ—Ç–≤–µ—Ç –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.\n\n**–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**\n‚Ä¢ –ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –æ—Ç–ø—É—Å–∫?\n‚Ä¢ –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏?\n‚Ä¢ –†–∞–∑–º–µ—Ä –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –∑–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]),
        parse_mode='Markdown'
    )
    await callback.answer()

@router.callback_query(F.data.startswith("faq_"))
async def old_faq_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—ã—Ö FAQ callback (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤–æ–µ FAQ –º–µ–Ω—é
    await show_faq_callback(callback)

@router.callback_query(F.data.startswith("show_files_"))
async def show_files_callback(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–§–∞–π–ª—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∏" - —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª—ã –Ω–∞–ø—Ä—è–º—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ª–∏–º–∏—Ç–∞–º–∏
    """
    try:
        message_id = callback.data.split("_")[-1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not check_user_file_limit(callback.from_user.id):
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
            limit_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîç –ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="smart_search")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
            
            await callback.message.answer(
                "‚è∞ **–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤**\n\n"
                f"–ú–∞–∫—Å–∏–º—É–º {MAX_FILES_PER_HOUR} —Ñ–∞–π–ª–æ–≤ –≤ —á–∞—Å. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=limit_keyboard,
                parse_mode='Markdown'
            )
            await callback.answer()
            return
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ storage
        storage_data = files_storage.get(message_id, {})
        files = storage_data.get('files', []) if isinstance(storage_data, dict) else []
        
        if not files:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫–æ–≥–¥–∞ —Ñ–∞–π–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
            no_files_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîç –ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="smart_search")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
            
            await callback.message.answer(
                "üìÅ **–§–∞–π–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã**\n\n"
                "–§–∞–π–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã. "
                "–í–æ–∑–º–æ–∂–Ω–æ, –∏—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è —Ö—Ä–∞–Ω–µ–Ω–∏—è.",
                reply_markup=no_files_keyboard,
                parse_mode='Markdown'
            )
            await callback.answer()
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
        files_info = "üìé **–§–∞–π–ª—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:**\n\n"
        for i, file_info in enumerate(files, 1):
            title = file_info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            similarity = file_info.get('similarity', 0)
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º similarity –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –µ—Å–ª–∏ —ç—Ç–æ –¥–µ—Å—è—Ç–∏—á–Ω–∞—è –¥—Ä–æ–±—å
            relevance = int(similarity * 100) if similarity <= 1.0 else int(similarity)
            files_info += f"{i}. **{title}** (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {relevance}%)\n"
        
        files_info += f"\nüì§ –û—Ç–ø—Ä–∞–≤–ª—è—é {len(files)} —Ñ–∞–π–ª(–æ–≤)...\n"
        await callback.message.answer(files_info, parse_mode='Markdown')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
        sent_count = 0
        failed_count = 0
        
        for i, file_info in enumerate(files, 1):
            try:
                title = file_info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                file_path = file_info.get('file_path', '')
                file_type = file_info.get('file_type', '')
                original_filename = file_info.get('original_filename', 'document')
                
                if not file_path:
                    await callback.message.answer(f"‚ùå {i}. **{title}**\n–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ —É–∫–∞–∑–∞–Ω")
                    await log_file_download(callback.from_user.id, '', title, False)
                    failed_count += 1
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                if not is_file_allowed_for_sharing(file_path, file_type):
                    await callback.message.answer(
                        f"üîí {i}. **{title}**\n"
                        "–§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
                    )
                    await log_file_download(callback.from_user.id, file_path, title, False)
                    failed_count += 1
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                file_path_obj = Path(file_path)
                if not file_path_obj.exists():
                    await callback.message.answer(f"‚ùå {i}. **{title}**\n–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –¥–∏—Å–∫–µ: {file_path_obj.name}")
                    await log_file_download(callback.from_user.id, file_path, title, False)
                    failed_count += 1
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (Telegram –ª–∏–º–∏—Ç 50MB)
                file_size = file_path_obj.stat().st_size
                if file_size > 50 * 1024 * 1024:  # 50MB –≤ –±–∞–π—Ç–∞—Ö
                    size_mb = file_size / (1024 * 1024)
                    await callback.message.answer(
                        f"üìä {i}. **{title}**\n"
                        f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ ({size_mb:.1f} MB > 50 MB)\n"
                        f"üìÅ –§–∞–π–ª: `{file_path_obj.name}`"
                    )
                    await log_file_download(callback.from_user.id, file_path, title, False)
                    failed_count += 1
                    continue
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                    send_filename = original_filename if original_filename else file_path_obj.name
                    if not send_filename.lower().endswith(f'.{file_type.lower()}'):
                        send_filename += f'.{file_type.lower()}'
                    
                    file_input = FSInputFile(
                        path=str(file_path_obj),
                        filename=send_filename
                    )
                    
                    similarity = file_info.get('similarity', 0)
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º similarity –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –µ—Å–ª–∏ —ç—Ç–æ –¥–µ—Å—è—Ç–∏—á–Ω–∞—è –¥—Ä–æ–±—å
                    relevance = int(similarity * 100) if similarity <= 1.0 else int(similarity)
                    caption = f"üìÑ **{title}**\nüìä –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {relevance}%"
                    
                    await callback.message.answer_document(
                        document=file_input,
                        caption=caption,
                        parse_mode='Markdown'
                    )
                    
                    logger.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}: {title}")
                    await log_file_download(callback.from_user.id, file_path, title, True)
                    sent_count += 1
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    await asyncio.sleep(0.5)
                    
                except Exception as send_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {title}: {send_error}")
                    await callback.message.answer(f"‚ùå {i}. **{title}**\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞")
                    await log_file_download(callback.from_user.id, file_path, title, False)
                    failed_count += 1
                    
            except Exception as file_error:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {i}: {file_error}")
                await callback.message.answer(f"‚ùå {i}. –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞")
                failed_count += 1
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤
        navigation_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîç –ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="smart_search")],
            [InlineKeyboardButton(text="üìö FAQ", callback_data="show_faq"),
             InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
        
        # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        if sent_count > 0:
            summary = f"‚úÖ **–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {sent_count}**"
            if failed_count > 0:
                summary += f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_count}"
            summary += "\n\nüí° **–ß—Ç–æ –¥–∞–ª—å—à–µ?**\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        else:
            summary = "‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞**"
            if failed_count > 0:
                summary += f"\n–û—à–∏–±–æ–∫: {failed_count}"
            summary += "\n\nüîÑ **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**\n‚Ä¢ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ-–¥—Ä—É–≥–æ–º—É\n‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ FAQ\n‚Ä¢ –°–≤—è–∑–∞—Ç—å—Å—è —Å HR-–æ—Ç–¥–µ–ª–æ–º"
        
        await callback.message.answer(
            summary, 
            reply_markup=navigation_keyboard,
            parse_mode='Markdown'
        )
        
        # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if message_id in files_storage:
            del files_storage[message_id]
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_files_callback: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        error_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîç –ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="smart_search")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
        
        await callback.message.answer(
            "‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤**\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.",
            reply_markup=error_keyboard,
            parse_mode='Markdown'
        )
        await callback.answer()

def register_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    
    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä aiogram
    """
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä
    dp.include_router(router)
    
    logger.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã") 