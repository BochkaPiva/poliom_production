#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
FAQ Handler –¥–ª—è Telegram-–±–æ—Ç–∞ POLIOM
–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ –º–µ–Ω—é FAQ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–æ–∏—Å–∫–æ–º
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler, CommandHandler
from telegram.constants import ParseMode
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ shared –º–æ–¥—É–ª—è–º
current_dir = Path(__file__).parent
project_root = current_dir.parent.parent.parent
sys.path.insert(0, str(project_root))

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π
try:
    from bot.faq_data import FAQ_DATA, get_faq_sections, get_section_questions, get_answer, search_faq
except ImportError:
    # Fallback –¥–ª—è —Å–ª—É—á–∞—è, –µ—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    FAQ_DATA = {}
    def get_faq_sections(): return []
    def get_section_questions(section): return []
    def get_answer(section, question): return None
    def search_faq(query): return []

try:
    from services.shared.utils.search_service import SearchService
    from services.shared.utils.llm_service import LLMService
except ImportError:
    # Fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    class SearchService:
        def search(self, query, max_results=5):
            return {'results': []}
    
    class LLMService:
        async def format_search_answer(self, question, results):
            return f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: {question}"
        
        async def handle_no_results(self, question):
            return f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {question}"
        
        async def suggest_clarification(self, question):
            return f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å: {question}"

logger = logging.getLogger(__name__)

class FAQHandler:
    def __init__(self):
        self.search_service = SearchService()
        self.llm_service = LLMService()
    
    async def show_faq_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é FAQ"""
        keyboard = []
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
        sections = get_faq_sections()
        for i in range(0, len(sections), 2):
            row = []
            for j in range(2):
                if i + j < len(sections):
                    section = sections[i + j]
                    row.append(InlineKeyboardButton(
                        section, 
                        callback_data=f"faq_section:{section}"
                    ))
            keyboard.append(row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞ –∏ –ø–æ–º–æ—â–∏
        keyboard.extend([
            [InlineKeyboardButton("üîç –£–º–Ω—ã–π –ø–æ–∏—Å–∫", callback_data="smart_search")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = """ü§ñ **POLIOM HR Assistant**

üìö **–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª FAQ:**

–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç—Ä—É–¥–æ–≤—ã–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º, –æ–ø–ª–∞—Ç–µ —Ç—Ä—É–¥–∞, –æ—Ç–ø—É—Å–∫–∞–º –∏ –¥—Ä—É–≥–∏–º –≤–∞–∂–Ω—ã–º —Ç–µ–º–∞–º.

üîç **–£–º–Ω—ã–π –ø–æ–∏—Å–∫** - –∑–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –∏ —è –Ω–∞–π–¥—É –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –∫–æ–º–ø–∞–Ω–∏–∏."""

        if update.callback_query:
            await update.callback_query.edit_message_text(
                message_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await update.message.reply_text(
                message_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
    
    async def show_section_questions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ"""
        query = update.callback_query
        await query.answer()
        
        section = query.data.split(":", 1)[1]
        questions = get_section_questions(section)
        
        if not questions:
            await query.edit_message_text("‚ùå –†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        keyboard = []
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        for question in questions:
            keyboard.append([InlineKeyboardButton(
                f"‚ùì {question[:60]}..." if len(question) > 60 else f"‚ùì {question}",
                callback_data=f"faq_answer:{section}:{question}"
            )])
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–∞–∑–¥–µ–ª–∞–º", callback_data="faq_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        section_description = FAQ_DATA[section]["description"]
        message_text = f"""üìã **{section}**

{section_description}

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:"""
        
        await query.edit_message_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def show_answer(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å"""
        query = update.callback_query
        await query.answer()
        
        try:
            _, section, question = query.data.split(":", 2)
            answer_data = get_answer(section, question)
            
            if not answer_data:
                await query.edit_message_text("‚ùå –û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            keyboard = [
                [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data=f"search_similar:{question}")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º", callback_data=f"faq_section:{section}")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="faq_menu")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            message_text = f"""‚ùì **{question}**

{answer_data['answer']}

üìã *{answer_data['source']}*"""
            
            await query.edit_message_text(
                message_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"Error showing answer: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–≤–µ—Ç–∞")
    
    async def start_smart_search(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å —É–º–Ω—ã–π –ø–æ–∏—Å–∫"""
        query = update.callback_query
        await query.answer()
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ FAQ", callback_data="faq_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = """üîç **–£–º–Ω—ã–π –ø–æ–∏—Å–∫**

–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –∏ —è –Ω–∞–π–¥—É –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –∫–æ–º–ø–∞–Ω–∏–∏.

**–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Ç–ø—É—Å–∫–∞ –ø–æ–ª–æ–∂–µ–Ω–æ?
‚Ä¢ –ö–∞–∫ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ?
‚Ä¢ –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –ø—Ä–∏–µ–º–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É?
‚Ä¢ –ú–æ–∂–Ω–æ –ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å —É–¥–∞–ª–µ–Ω–Ω–æ?

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º üëá"""
        
        await query.edit_message_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
        context.user_data['waiting_for_search'] = True
    
    async def handle_search_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"""
        if not context.user_data.get('waiting_for_search'):
            return
        
        context.user_data['waiting_for_search'] = False
        user_question = update.message.text
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
        await update.message.reply_chat_action("typing")
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ FAQ
            faq_results = search_faq(user_question)
            
            # –ó–∞—Ç–µ–º –∏—â–µ–º –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö —á–µ—Ä–µ–∑ SearchService
            search_results = self.search_service.search(user_question, max_results=3)
            
            if faq_results or search_results.get('results'):
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é LLM
                formatted_answer = await self.llm_service.format_search_answer(
                    user_question, 
                    search_results.get('results', [])
                )
                
                keyboard = [
                    [InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="smart_search")],
                    [InlineKeyboardButton("üìö FAQ", callback_data="faq_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã FAQ –µ—Å–ª–∏ –µ—Å—Ç—å
                if faq_results:
                    faq_section = "\n\nüìö **–ü–æ—Ö–æ–∂–∏–µ –≤–æ–ø—Ä–æ—Å—ã –≤ FAQ:**\n"
                    for result in faq_results[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 2 –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                        faq_section += f"‚Ä¢ {result['question']}\n"
                    formatted_answer += faq_section
                
                await update.message.reply_text(
                    formatted_answer,
                    reply_markup=reply_markup,
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                keyboard = [
                    [InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="smart_search")],
                    [InlineKeyboardButton("üìö –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å FAQ", callback_data="faq_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    "‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
                    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
                    "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–∑–¥–µ–ª—ã FAQ",
                    reply_markup=reply_markup
                )
                
        except Exception as e:
            logger.error(f"Error in search: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def search_similar(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ –≤–æ–ø—Ä–æ—Å—ã"""
        query = update.callback_query
        await query.answer()
        
        question = query.data.split(":", 1)[1]
        
        # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –≤–æ–ø—Ä–æ—Å—ã –≤ FAQ
        faq_results = search_faq(question)
        
        if len(faq_results) <= 1:  # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
            await query.edit_message_text(
                "‚ùå –ü–æ—Ö–æ–∂–∏–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="faq_menu")
                ]])
            )
            return
        
        keyboard = []
        for result in faq_results[1:4]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 3 –ø–æ—Ö–æ–∂–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            keyboard.append([InlineKeyboardButton(
                f"‚ùì {result['question'][:50]}...",
                callback_data=f"faq_answer:{result['section']}:{result['question']}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ FAQ", callback_data="faq_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üîç **–ü–æ—Ö–æ–∂–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è:** {question[:50]}...\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def show_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        query = update.callback_query
        await query.answer()
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ FAQ", callback_data="faq_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        help_text = """‚ùì **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**

ü§ñ **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:**
‚Ä¢ üìö –ü—Ä–æ—Å–º–æ—Ç—Ä FAQ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
‚Ä¢ üîç –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
‚Ä¢ üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏

üîç **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–∏—Å–∫–æ–º:**
1. –ù–∞–∂–º–∏—Ç–µ "–£–º–Ω—ã–π –ø–æ–∏—Å–∫"
2. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
3. –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞

üìö **–†–∞–∑–¥–µ–ª—ã FAQ:**
‚Ä¢ üí∞ –û–ø–ª–∞—Ç–∞ —Ç—Ä—É–¥–∞ - –∑–∞—Ä–ø–ª–∞—Ç–∞, –ø—Ä–µ–º–∏–∏, –Ω–∞–¥–±–∞–≤–∫–∏
‚Ä¢ ‚è∞ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è - –≥—Ä–∞—Ñ–∏–∫, –æ—Ç–ø—É—Å–∫–∞, –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏
‚Ä¢ üè† –î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ - —É–¥–∞–ª–µ–Ω–∫–∞, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
‚Ä¢ ü§ù –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ - –ø–æ–º–æ—â—å, –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
‚Ä¢ üèÜ –ü–æ–æ—â—Ä–µ–Ω–∏—è - –Ω–∞–≥—Ä–∞–¥—ã, –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
‚Ä¢ ‚öñÔ∏è –¢—Ä—É–¥–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è - –ø—Ä–∏–µ–º, —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ
‚Ä¢ üõ°Ô∏è –û—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞ - –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, –º–µ–¥–æ—Å–º–æ—Ç—Ä—ã

üí° **–°–æ–≤–µ—Ç:** –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç –≤ FAQ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–º–Ω—ã–π –ø–æ–∏—Å–∫ - –æ–Ω –Ω–∞–π–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤–æ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –∫–æ–º–ø–∞–Ω–∏–∏."""
        
        await query.edit_message_text(
            help_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_faq_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ FAQ"""
    faq_handler = FAQHandler()
    
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("faq", faq_handler.show_faq_menu))
    application.add_handler(CommandHandler("help", faq_handler.show_help))
    
    # Callback handlers
    application.add_handler(CallbackQueryHandler(
        faq_handler.show_faq_menu, pattern="^faq_menu$"
    ))
    application.add_handler(CallbackQueryHandler(
        faq_handler.show_section_questions, pattern="^faq_section:"
    ))
    application.add_handler(CallbackQueryHandler(
        faq_handler.show_answer, pattern="^faq_answer:"
    ))
    application.add_handler(CallbackQueryHandler(
        faq_handler.start_smart_search, pattern="^smart_search$"
    ))
    application.add_handler(CallbackQueryHandler(
        faq_handler.search_similar, pattern="^search_similar:"
    ))
    application.add_handler(CallbackQueryHandler(
        faq_handler.show_help, pattern="^help$"
    ))
    
    return faq_handler 