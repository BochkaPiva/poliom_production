"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å RAG —Å–∏—Å—Ç–µ–º–æ–π
"""

import asyncio
import logging
import os
import sys
from pathlib import Path
from typing import Dict, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ shared –º–æ–¥—É–ª—è–º
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root / "shared"))
sys.path.insert(0, str(project_root / "services" / "telegram-bot"))

try:
    from utils.simple_rag import SimpleRAG
    from utils.llm_client import SimpleLLMClient
    from models.document import Document, DocumentChunk
except ImportError:
    # Fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    sys.path.insert(0, str(project_root / "services" / "shared"))
    from utils.simple_rag import SimpleRAG
    from utils.llm_client import SimpleLLMClient
    from models.document import Document, DocumentChunk

try:
    from bot.database import get_db_session
except ImportError:
    # Fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    current_dir = os.path.dirname(os.path.abspath(__file__))
    sys.path.insert(0, current_dir)
    from database import get_db_session

logger = logging.getLogger(__name__)

class RAGService:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å RAG —Å–∏—Å—Ç–µ–º–æ–π
    –ê–¥–∞–ø—Ç–µ—Ä –º–µ–∂–¥—É —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π RAG —Å–∏—Å—Ç–µ–º–æ–π –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –±–æ—Ç–æ–º
    """
    
    def __init__(self, gigachat_api_key: str):
        self.gigachat_api_key = gigachat_api_key
        self.rag_system = None
        self.initialized = False
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–∏—Å—Ç–µ–º—ã"""
        if self.initialized:
            return
        
        try:
            logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RAG —Å–∏—Å—Ç–µ–º—É...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –ë–î
            db_session = next(get_db_session())
            
            # –°–æ–∑–¥–∞–µ–º RAG —Å–∏—Å—Ç–µ–º—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            loop = asyncio.get_event_loop()
            self.rag_system = await loop.run_in_executor(
                None, 
                self._create_rag_system, 
                db_session
            )
            
            self.initialized = True
            logger.info("‚úÖ RAG —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG —Å–∏—Å—Ç–µ–º—ã: {e}")
            raise
    
    def _create_rag_system(self, db_session):
        """–°–æ–∑–¥–∞–Ω–∏–µ RAG —Å–∏—Å—Ç–µ–º—ã (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)"""
        return SimpleRAG(db_session, self.gigachat_api_key)
    
    async def answer_question(self, question: str, user_id: Optional[int] = None) -> Dict[str, Any]:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            
        Returns:
            Dict —Å –æ—Ç–≤–µ—Ç–æ–º –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        if not self.initialized:
            await self.initialize()
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            loop = asyncio.get_event_loop()
            result = await loop.run_in_executor(
                None,
                self.rag_system.answer_question,
                question,
                user_id
            )
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {e}")
            return {
                'answer': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.',
                'sources': [],
                'success': False,
                'error': str(e),
                'tokens_used': 0
            }
    
    async def health_check(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ RAG —Å–∏—Å—Ç–µ–º—ã
        
        Returns:
            Dict —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        """
        if not self.initialized:
            try:
                await self.initialize()
            except Exception as e:
                return {
                    'overall': False,
                    'llm': False,
                    'embeddings': False,
                    'database': False,
                    'documents_count': None,
                    'error': str(e)
                }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            loop = asyncio.get_event_loop()
            status = await loop.run_in_executor(
                None,
                self.rag_system.health_check
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            documents_count = await self._get_documents_count()
            
            overall_status = all([
                status['embeddings_model'],
                status['llm_client'],
                status['database']
            ])
            
            return {
                'overall': overall_status,
                'llm': status['llm_client'],
                'embeddings': status['embeddings_model'],
                'database': status['database'],
                'documents_count': documents_count
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {
                'overall': False,
                'llm': False,
                'embeddings': False,
                'database': False,
                'documents_count': None,
                'error': str(e)
            }
    
    async def _get_documents_count(self) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ"""
        try:
            loop = asyncio.get_event_loop()
            count = await loop.run_in_executor(
                None,
                self._count_documents_sync
            )
            return count
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
            return None
    
    def _count_documents_sync(self) -> int:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        try:
            db_session = next(get_db_session())
            count = db_session.query(Document).filter(
                Document.processing_status == 'completed'
            ).count()
            return count
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
            return 0
    
    async def search_documents(self, query: str, limit: int = 10) -> Dict[str, Any]:
        """
        –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
        """
        if not self.initialized:
            await self.initialize()
        
        try:
            loop = asyncio.get_event_loop()
            chunks = await loop.run_in_executor(
                None,
                self.rag_system.search_relevant_chunks,
                query,
                limit
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞–Ω–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            formatted_chunks = []
            for chunk in chunks:
                formatted_chunks.append({
                    'document_id': chunk['document_id'],
                    'content': chunk['content'],
                    'chunk_index': chunk['chunk_index'],
                    'similarity': chunk.get('similarity', 0.0)
                })
            
            return {
                'success': True,
                'chunks': formatted_chunks,
                'total_found': len(chunks)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
            return {
                'success': False,
                'chunks': [],
                'total_found': 0,
                'error': str(e)
            }
    
    async def _get_document_info(self, document_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
        try:
            loop = asyncio.get_event_loop()
            doc_info = await loop.run_in_executor(
                None,
                self._get_document_info_sync,
                document_id
            )
            return doc_info
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ: {e}")
            return None
    
    def _get_document_info_sync(self, document_id: int) -> Optional[Dict[str, Any]]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
        try:
            db_session = next(get_db_session())
            document = db_session.query(Document).filter(
                Document.id == document_id
            ).first()
            
            if document:
                return {
                    'id': document.id,
                    'title': document.title,
                    'file_type': document.file_type,
                    'created_at': document.created_at
                }
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {document_id}: {e}")
            return None

    async def get_faq_by_category(self, category: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ FAQ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        
        Args:
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è FAQ (payment, worktime, remote, etc.)
            
        Returns:
            Dict —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –æ—Ç–≤–µ—Ç–∞–º–∏
        """
        if not self.initialized:
            await self.initialize()
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ FAQ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            loop = asyncio.get_event_loop()
            result = await loop.run_in_executor(
                None,
                self._get_faq_by_category_sync,
                category
            )
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è FAQ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}: {e}")
            return {
                'success': False,
                'questions': [],
                'error': str(e)
            }
    
    def _get_faq_by_category_sync(self, category: str) -> Dict[str, Any]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ FAQ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            if hasattr(self.rag_system, 'get_faq_by_category'):
                return self.rag_system.get_faq_by_category(category)
            else:
                # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                category_keywords = {
                    "payment": "–æ–ø–ª–∞—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞ –ø—Ä–µ–º–∏—è",
                    "worktime": "—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –æ—Ç–ø—É—Å–∫ –≤—ã—Ö–æ–¥–Ω—ã–µ",
                    "remote": "–¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —É–¥–∞–ª–µ–Ω–Ω–∞—è",
                    "social": "—Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ª—å–≥–æ—Ç—ã",
                    "rewards": "–ø–æ–æ—â—Ä–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã –±–æ–Ω—É—Å—ã",
                    "labor": "—Ç—Ä—É–¥–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä",
                    "safety": "–æ—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"
                }
                
                keyword = category_keywords.get(category, category)
                result = self.rag_system.answer_question(f"FAQ {keyword}")
                
                if result.get('success'):
                    # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –∫–∞–∫ FAQ
                    return {
                        'success': True,
                        'questions': [
                            {
                                'question': f"–í–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ: {keyword}",
                                'answer': result['answer']
                            }
                        ]
                    }
                else:
                    return {
                        'success': False,
                        'questions': [],
                        'error': 'FAQ –Ω–µ –Ω–∞–π–¥–µ–Ω'
                    }
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è FAQ: {e}")
            return {
                'success': False,
                'questions': [],
                'error': str(e)
            }

    async def search_relevant_chunks(self, query: str, limit: int = 10) -> list:
        """
        –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            List —Å —á–∞–Ω–∫–∞–º–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
        """
        if not self.initialized:
            await self.initialize()
        
        try:
            loop = asyncio.get_event_loop()
            chunks = await loop.run_in_executor(
                None,
                self.rag_system.search_relevant_chunks,
                query,
                limit
            )
            
            # –û–±–æ–≥–∞—â–∞–µ–º —á–∞–Ω–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
            enriched_chunks = []
            for chunk in chunks:
                doc_info = await self._get_document_info(chunk['document_id'])
                enriched_chunk = {
                    'document_id': chunk['document_id'],
                    'document_title': doc_info['title'] if doc_info else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç',
                    'content': chunk['content'],
                    'chunk_index': chunk['chunk_index'],
                    'similarity': chunk.get('similarity', 0.0)
                }
                enriched_chunks.append(enriched_chunk)
            
            return enriched_chunks
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤: {e}")
            return [] 