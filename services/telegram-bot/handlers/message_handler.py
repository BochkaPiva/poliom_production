import logging
import re
from telegram import Update
from telegram.ext import ContextTypes

from services.shared.config import Config
from services.telegram_bot.bot.rag_service import RAGService

logger = logging.getLogger(__name__)

class MessageHandler:
    def __init__(self, config: Config, rag_service: RAGService):
        self.config = config
        self.rag_service = rag_service

    def is_blocked_response(self, response: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –æ—Ç–≤–µ—Ç GigaChat"""
        blocked_phrases = [
            "–ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ –æ–±–ª–∞–¥–∞—é—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –º–Ω–µ–Ω–∏–µ–º",
            "—Ä–∞–∑–≥–æ–≤–æ—Ä—ã –Ω–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–º—ã –º–æ–≥—É—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã",
            "—Ä–∞–∑–≥–æ–≤–æ—Ä—ã –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–º—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã",
            "–ö–∞–∫ –∏ –ª—é–±–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å, GigaChat –Ω–µ –æ–±–ª–∞–¥–∞–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –º–Ω–µ–Ω–∏–µ–º"
        ]
        return any(phrase in response for phrase in blocked_phrases)

    def extract_key_information(self, context: str, question: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞"""
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        sources = re.split(r'\[–ò—Å—Ç–æ—á–Ω–∏–∫ \d+:', context)
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        question_words = set(re.findall(r'\b\w+\b', question.lower()))
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
        stop_words = {'–≤', '–Ω–∞', '—Å', '–ø–æ', '–¥–ª—è', '–æ—Ç', '–¥–æ', '–∏–∑', '–∫', '–æ', '–æ–±', '–∏', '–∏–ª–∏', '–∞', '–Ω–æ', '—á—Ç–æ', '–∫–∞–∫', '–∫–æ–≥–¥–∞', '–≥–¥–µ', '–ø–æ—á–µ–º—É', '–∫–∞–∫–æ–π', '–∫–∞–∫–∞—è', '–∫–∞–∫–∏–µ', '–∫–æ—Ç–æ—Ä—ã–π', '–∫–æ—Ç–æ—Ä–∞—è', '–∫–æ—Ç–æ—Ä—ã–µ'}
        question_words = question_words - stop_words
        
        relevant_info = []
        
        for source in sources[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—É—Å—Ç–æ–π —ç–ª–µ–º–µ–Ω—Ç
            if not source.strip():
                continue
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            doc_match = re.search(r'^([^\]]+)\]', source)
            doc_name = doc_match.group(1) if doc_match else "–î–æ–∫—É–º–µ–Ω—Ç"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            source_text = source.split(']', 1)[-1].strip()
            
            # –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            sentences = re.split(r'[.!?]+', source_text)
            
            for sentence in sentences:
                sentence = sentence.strip()
                if len(sentence) < 20:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                    continue
                    
                sentence_words = set(re.findall(r'\b\w+\b', sentence.lower()))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –≤–æ–ø—Ä–æ—Å–∞
                if question_words & sentence_words:
                    relevant_info.append({
                        'text': sentence,
                        'source': doc_name,
                        'relevance': len(question_words & sentence_words)
                    })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        relevant_info.sort(key=lambda x: x['relevance'], reverse=True)
        
        if not relevant_info:
            return None
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        response_parts = ["üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:**\n"]
        
        used_sources = set()
        added_info = 0
        
        for info in relevant_info[:5]:  # –ë–µ—Ä–µ–º —Ç–æ–ø-5 –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö
            if added_info >= 3:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–Ω–∫—Ç–æ–≤
                break
                
            text = info['text']
            source = info['source']
            
            # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            if text not in [item['text'] for item in relevant_info[:added_info]]:
                response_parts.append(f"‚Ä¢ {text}")
                used_sources.add(source)
                added_info += 1
        
        if used_sources:
            response_parts.append(f"\n*–ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(used_sources)}*")
        
        return "\n".join(response_parts)

    def extract_specific_data_patterns(self, context: str, question: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–∞–Ω–Ω—ã—Ö (–¥–∞—Ç—ã, —á–∏—Å–ª–∞, –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∏ —Ç.–¥.)"""
        
        patterns = {
            'dates': r'\b\d{1,2}[-./]\d{1,2}[-./]\d{2,4}\b|\b\d{1,2}[-–µ\s]*(?:—á–∏—Å–ª–æ|—á–∏—Å–ª–∞)\b',
            'percentages': r'\b\d+(?:[.,]\d+)?%\b|\b\d+(?:[.,]\d+)?\s*–ø—Ä–æ—Ü–µ–Ω—Ç[–∞-—è]*\b',
            'money': r'\b\d+(?:\s?\d{3})*(?:[.,]\d+)?\s*(?:—Ä—É–±|—Ä—É–±–ª[–µ–π]*|—Ç—ã—Å|–º–ª–Ω)\b',
            'time': r'\b\d{1,2}:\d{2}\b|\b\d{1,2}\s*—á–∞—Å[–∞-—è]*\b',
            'periods': r'\b(?:–µ–∂–µ–º–µ—Å—è—á–Ω–æ|–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ|–µ–∂–µ–≥–æ–¥–Ω–æ|—Ä–∞–∑ –≤ –º–µ—Å—è—Ü|–¥–≤–∞ —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü)\b'
        }
        
        found_data = []
        
        for pattern_name, pattern in patterns.items():
            matches = re.findall(pattern, context, re.IGNORECASE)
            if matches:
                found_data.extend(matches)
        
        if found_data:
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            unique_data = list(set(found_data))
            return f"**–ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:** {', '.join(unique_data)}"
        
        return None

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            user_message = update.message.text
            user_id = update.effective_user.id
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_message}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç RAG —Å–∏—Å—Ç–µ–º—ã
            response = await self.rag_service.answer_question(user_message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –æ—Ç–≤–µ—Ç
            if self.is_blocked_response(response):
                logger.warning(f"–û—Ç–≤–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω GigaChat –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞: {user_message}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ RAG —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —á–∞–Ω–∫–∏
                    chunks = await self.rag_service.search_relevant_chunks(user_message, limit=10)
                    
                    if chunks:
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —á–∞–Ω–∫–æ–≤
                        context_parts = []
                        for i, chunk in enumerate(chunks, 1):
                            doc_title = chunk.get('document_title', '–î–æ–∫—É–º–µ–Ω—Ç')
                            content = chunk.get('content', '')
                            context_parts.append(f"[–ò—Å—Ç–æ—á–Ω–∏–∫ {i}: {doc_title}]\n{content}")
                        
                        full_context = "\n\n".join(context_parts)
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        extracted_info = self.extract_key_information(full_context, user_message)
                        
                        if extracted_info:
                            response = extracted_info
                            logger.info("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
                        else:
                            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                            specific_data = self.extract_specific_data_patterns(full_context, user_message)
                            if specific_data:
                                response = f"üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:**\n\n{specific_data}\n\n*–ù–∞–π–¥–µ–Ω–æ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏*"
                                logger.info("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
                            else:
                                response = """‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ HR-–æ—Ç–¥–µ–ª—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
                    else:
                        response = "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö."
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
                    response = """‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ HR-–æ—Ç–¥–µ–ª—É."""
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await update.message.reply_text(
                response,
                parse_mode='Markdown'
            )
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            ) 